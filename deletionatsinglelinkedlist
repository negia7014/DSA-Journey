// Definition for singly-linked list
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class LinkedListDeletion {

    // Print the linked list
    public static void printList(ListNode head) {
        ListNode temp = head;
        while (temp != null) {
            System.out.print(temp.val + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    // 1. Delete at beginning
    public static ListNode deleteAtBeginning(ListNode head) {
        if (head == null) return null; // empty list
        return head.next; // move head to next node
    }

    // 2. Delete at end
    public static ListNode deleteAtEnd(ListNode head) {
        if (head == null) return null; // empty list
        if (head.next == null) return null; // only one node
        ListNode temp = head;
        while (temp.next.next != null) { // move to second last
            temp = temp.next;
        }
        temp.next = null; // remove last node
        return head;
    }

    // 3. Delete at given position (1-indexed)
    public static ListNode deleteAtPosition(ListNode head, int pos) {
        if (head == null) return null;
        if (pos == 1) return head.next; // delete head
        ListNode temp = head;
        for (int i = 1; i < pos - 1 && temp != null; i++) {
            temp = temp.next;
        }
        if (temp == null || temp.next == null) return head; // position out of bounds
        temp.next = temp.next.next;
        return head;
    }

    // 4. Delete by value
    public static ListNode deleteByValue(ListNode head, int val) {
        if (head == null) return null;
        if (head.val == val) return head.next; // value at head
        ListNode temp = head;
        while (temp.next != null && temp.next.val != val) {
            temp = temp.next;
        }
        if (temp.next != null) {
            temp.next = temp.next.next;
        }
        return head;
    }

    // 5. Delete entire list
    public static ListNode deleteEntireList(ListNode head) {
        head = null; // all nodes removed
        return head;
    }

    public static void main(String[] args) {
        // Create linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        System.out.println("Original List:");
        printList(head);

        // 1. Delete at beginning
        head = deleteAtBeginning(head);
        System.out.println("After deleting at beginning:");
        printList(head);

        // 2. Delete at end
        head = deleteAtEnd(head);
        System.out.println("After deleting at end:");
        printList(head);

        // 3. Delete at position 2
        head = deleteAtPosition(head, 2);
        System.out.println("After deleting at position 2:");
        printList(head);

        // 4. Delete by value 2
        head = deleteByValue(head, 2);
        System.out.println("After deleting by value 2:");
        printList(head);

       head = deleteEntireList(head);
        System.out.println("After deleting entire list:");
        printList(head);

    }
}
